; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [3 x i8] c"BC\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@11 = private unnamed_addr constant [3 x i8] c"@a\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@15 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@16 = private unnamed_addr constant [2 x i8] c" \00", align 1
@17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@18 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@19 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@21 = private unnamed_addr constant [3 x i8] c"a@\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@23 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@24 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@25 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@26 = private unnamed_addr constant [2 x i8] c" \00", align 1
@27 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@28 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@29 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@30 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@31 = private unnamed_addr constant [4 x i8] c"sbs\00", align 1
@32 = private unnamed_addr constant [4 x i8] c"sbs\00", align 1
@33 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %c = alloca i8*, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8** %c, align 8
  %is_alpha = alloca i1, align 1
  %num = alloca i8*, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8** %num, align 8
  %2 = load i8*, i8** %c, align 8
  %3 = alloca i8*, align 8
  store i8* %2, i8** %3, align 8
  %4 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i8** %4, align 8
  %5 = call i1 @_lpython_str_compare_gte(i8** %3, i8** %4)
  %6 = load i8*, i8** %c, align 8
  %7 = alloca i8*, align 8
  store i8* %6, i8** %7, align 8
  %8 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8** %8, align 8
  %9 = call i1 @_lpython_str_compare_lte(i8** %7, i8** %8)
  %10 = icmp eq i1 %5, false
  %11 = select i1 %10, i1 %5, i1 %9
  %12 = load i8*, i8** %c, align 8
  %13 = alloca i8*, align 8
  store i8* %12, i8** %13, align 8
  %14 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i8** %14, align 8
  %15 = call i1 @_lpython_str_compare_gte(i8** %13, i8** %14)
  %16 = load i8*, i8** %c, align 8
  %17 = alloca i8*, align 8
  store i8* %16, i8** %17, align 8
  %18 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0), i8** %18, align 8
  %19 = call i1 @_lpython_str_compare_lte(i8** %17, i8** %18)
  %20 = icmp eq i1 %15, false
  %21 = select i1 %20, i1 %15, i1 %19
  %22 = icmp eq i1 %11, false
  %23 = select i1 %22, i1 %21, i1 %11
  store i1 %23, i1* %is_alpha, align 1
  %24 = load i1, i1* %is_alpha, align 1
  %25 = icmp eq i1 %24, false
  %26 = select i1 %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @_lfortran_strcpy(i8** %c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @11, i32 0, i32 0), i8 0)
  %27 = load i8*, i8** %c, align 8
  %28 = alloca i8*, align 8
  store i8* %27, i8** %28, align 8
  %29 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i8** %29, align 8
  %30 = call i1 @_lpython_str_compare_gte(i8** %28, i8** %29)
  %31 = load i8*, i8** %c, align 8
  %32 = alloca i8*, align 8
  store i8* %31, i8** %32, align 8
  %33 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0), i8** %33, align 8
  %34 = call i1 @_lpython_str_compare_lte(i8** %32, i8** %33)
  %35 = icmp eq i1 %30, false
  %36 = select i1 %35, i1 %30, i1 %34
  %37 = load i8*, i8** %c, align 8
  %38 = alloca i8*, align 8
  store i8* %37, i8** %38, align 8
  %39 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0), i8** %39, align 8
  %40 = call i1 @_lpython_str_compare_gte(i8** %38, i8** %39)
  %41 = load i8*, i8** %c, align 8
  %42 = alloca i8*, align 8
  store i8* %41, i8** %42, align 8
  %43 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i32 0, i32 0), i8** %43, align 8
  %44 = call i1 @_lpython_str_compare_lte(i8** %42, i8** %43)
  %45 = icmp eq i1 %40, false
  %46 = select i1 %45, i1 %40, i1 %44
  %47 = icmp eq i1 %36, false
  %48 = select i1 %47, i1 %46, i1 %36
  store i1 %48, i1* %is_alpha, align 1
  %49 = load i1, i1* %is_alpha, align 1
  %50 = icmp eq i1 %49, false
  %51 = select i1 %50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i32 0, i32 0))
  call void @_lfortran_strcpy(i8** %c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i32 0, i32 0), i8 0)
  %52 = load i8*, i8** %c, align 8
  %53 = alloca i8*, align 8
  store i8* %52, i8** %53, align 8
  %54 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0), i8** %54, align 8
  %55 = call i1 @_lpython_str_compare_gte(i8** %53, i8** %54)
  %56 = load i8*, i8** %c, align 8
  %57 = alloca i8*, align 8
  store i8* %56, i8** %57, align 8
  %58 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @23, i32 0, i32 0), i8** %58, align 8
  %59 = call i1 @_lpython_str_compare_lte(i8** %57, i8** %58)
  %60 = icmp eq i1 %55, false
  %61 = select i1 %60, i1 %55, i1 %59
  %62 = load i8*, i8** %c, align 8
  %63 = alloca i8*, align 8
  store i8* %62, i8** %63, align 8
  %64 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @24, i32 0, i32 0), i8** %64, align 8
  %65 = call i1 @_lpython_str_compare_gte(i8** %63, i8** %64)
  %66 = load i8*, i8** %c, align 8
  %67 = alloca i8*, align 8
  store i8* %66, i8** %67, align 8
  %68 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0), i8** %68, align 8
  %69 = call i1 @_lpython_str_compare_lte(i8** %67, i8** %68)
  %70 = icmp eq i1 %65, false
  %71 = select i1 %70, i1 %65, i1 %69
  %72 = icmp eq i1 %61, false
  %73 = select i1 %72, i1 %71, i1 %61
  store i1 %73, i1* %is_alpha, align 1
  %74 = load i1, i1* %is_alpha, align 1
  %75 = icmp eq i1 %74, false
  %76 = select i1 %75, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @30, i32 0, i32 0), i8* %76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @27, i32 0, i32 0))
  %77 = load i8*, i8** %num, align 8
  %78 = call i8* @_lfortran_str_slice_assign(i8* %77, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @31, i32 0, i32 0), i32 0, i32 3, i32 1, i1 true, i1 true)
  store i8* %78, i8** %num, align 8
  %79 = load i8*, i8** %num, align 8
  %80 = alloca i8*, align 8
  store i8* %79, i8** %80, align 8
  %81 = alloca i8*, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @32, i32 0, i32 0), i8** %81, align 8
  %82 = call i1 @_lpython_str_compare_noteq(i8** %80, i8** %81)
  br i1 %82, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @33, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare i1 @_lpython_str_compare_gte(i8**, i8**)

declare i1 @_lpython_str_compare_lte(i8**, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_strcpy(i8**, i8*, i8)

declare i8* @_lfortran_str_slice_assign(i8*, i8*, i32, i32, i32, i1, i1)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
